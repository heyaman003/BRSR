// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url = env("DB_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role Role
  company Company? @relation(fields: [companyId], references: [id], name: "employee-of", onDelete: Cascade)
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[] @relation(name: "commented-by")
  history History[] @relation(name: "saved-by")
  assignedQuestions Question[] @relation(name: "assigned-questions")
  approveQuestions Question[] @relation(name: "approve-questions")
  mentionedIn Mention[] @relation(name: "mentioned-in") //Set of all mentions where user was mentioned by someone
}

model Company {
  id String @id @default(uuid())
  name String
  users User[] @relation(name: "employee-of")
  sections Section[] @relation(name: "section-belongs-to")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id String @id @default(uuid())
  title String
  company Company @relation(name: "section-belongs-to", fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  subsections Subsection[] @relation(name: "subsection-belongs-to")
}

model Subsection {
  id String @id @default(uuid())
  title String
  section Section @relation(name: "subsection-belongs-to", fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  questions Question[] @relation(name: "question-belongs-to")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id String @id @default(uuid())
  heading String? @default("")
  desc String
  type QuestionType
  answer_text String?
  answer_table Table[] @relation(name: "answer-to")
  subsection Subsection @relation(name:"question-belongs-to", fields: [subsectionId], references: [id], onDelete: Cascade)
  subsectionId String
  index Int
  comments Comment[] @relation(name: "belongs-to")
  history History[] @relation(name: "belongs-to")
  isAnswered Boolean @default(false)
  assignedTo   User?   @relation(name: "assigned-questions", fields: [assignedToId], references: [id])
  assignedToId String?
  approveTo   User?   @relation(name: "approve-questions", fields: [approveToId], references: [id])
  approveToId String?
  isApproved Boolean @default(false)
}

model History{
  id String @id @default(uuid())
  user User @relation(name: "saved-by", fields: [userId], references: [id], onDelete: Cascade)
  userId String
  question Question @relation(name: "belongs-to", references: [id], fields: [questionId], onDelete: Cascade)
  questionId String
  createdAt DateTime @default(now())
}

model Comment {
  id String @id @default(uuid())
  data String
  user User @relation(name: "commented-by", fields: [userId], references: [id], onDelete: Cascade)
  userId String
  question Question @relation(name: "belongs-to", references: [id], fields: [questionId], onDelete: Cascade)
  questionId String
  createdAt DateTime @default(now())
  mentions Mention[] @relation(name: "mentioned-in")
}

model Mention {
  id String @id @default(uuid())
  user User @relation(name: "mentioned-in", fields: [userId], references: [id], onDelete: Cascade)
  userId String
  comment Comment @relation(name: "mentioned-in", fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}

model Table {
  id String @id @default(uuid())
  question Question @relation(name: "answer-to", fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  rows Row[] @relation(name: "table-belongs-to")
  isDynamic Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Row {
  id String @id @default(uuid())
  isHeading Boolean //Puts this row inside the table heading
  table Table @relation(name: "table-belongs-to", fields: [tableId], references: [id], onDelete: Cascade)
  tableId String 
  cells Cell[] @relation(name: "cell-belongs-to")
  index Int
}

model Cell {
  id String @id @default(uuid())
  data String @default("")
  isUpdateable Boolean
  rowSpan Int @default(1)
  colSpan Int @default(1)
  row Row @relation(fields: [rowId], references: [id], name: "cell-belongs-to", onDelete: Cascade)
  rowId String
  index Int //Used to order the cells in response
  operation Operation?
  operands String[] @default([]) //Will have cell indexes in '{rowIndex}${columnIndex}' format
  isHeading Boolean? @default(false) // Used to specially highlight the cell
}


enum  Role {
  ADMIN
  CLIENT
  SUPERADMIN
}

enum QuestionType {
  TABLE
  TEXT
  BOOLEAN
}

enum Operation {
  ADD
  DIV
  MUL
  PERCENTAGE
  SUMDIVIDE
  SUB
}